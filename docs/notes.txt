This is just a random assortment of notes to keep track of things

-CHIP-8, which was essentially an entire (virtual) "computer" that not only 
included a "CPU", but memory, display, keyboard, buzzer, etc. This meant that 
all "ROMs" were essentially written with this entire "computer" in mind.

-However, Intel 8080 is (obviously) just a CPU and different systems may have 
had very different memory, peripherals, display, etc. Thus, it is likely not 
going to be as simple as making one general-purpose emulator for all 8080-based 
systems.

-Once we have the CPU emulated, we will likely then have to specifically 
emulate different 8080-platforms (with Space Invaders being the most common 
of course).

-Having said that, it is probably worthwhile to decouple as many 
platform-dependent features (like peripherals and display) from the main CPU 
emulator as possible. For now the memory is coupled with the CPU emulator 
since, although technically memory is separate from the CPU, it seems to make 
sense to keep it there since it's just a simple array. Though this can change 
if we feel it makes sense.

-For my own enjoyment, and to make testing a bit easier, I plan to write a bare-
bones 8080 assembler to allow making test ROMs easier (so we don't have to 
manually use a hex editor to punch hex opcodes into a binary file haha).

-We will have to look more closely to exactly how memory-mapped IO was used. I 
briefly read the User Manual on IO and it didn't seem too complicated but it 
warrants further research. But we probably don't need to worry about it yet 
while we're just working on emulating the 8080 instruction set.

-For testing/debugging purposes I'm also considering having ROM execution 
output a logfile containing the current position of PC, opcode being executed, 
and state of registers after each tick.

-Intel 8080 uses little-endian architecture so any hex that represents a 16-bit 
value in the ROM (for example an address) will appear in the ROM in little-
endian format. For example:

JMP $18D4

appears in the ROM as:

C3 D4 18

-However when using register pairs, they seem to follow big-endian format 
according to the manual, so in register pair BC, for example, C would contain 
the least-significant byte and B the most-significant

-Often you will see register 'M'. This is really just the memory byte pointed 
to by the register pair HL.

-There are a few different addressing 'modes':

Direct: The bytes represent the actual address (byte 1 = LSB, byte 2 = MSB)
Register: The bytes represent a register pair which contains the data
Register Indirect: The bytes represent a register pair which contains an address 
to the data
Immediate: The instruction contains the address itself

It is important when implementing instructions to double-check which 'mode' they 
operate in.

-It might be worthwhile/fun to implement cycle-accurate instructions. Since 
some (most) instructions take more than 1 clock cycle to complete and the 8080 
runs at roughly 2MHz, we'd need to take that into account if we want as accurate 
timing/speed as possible.